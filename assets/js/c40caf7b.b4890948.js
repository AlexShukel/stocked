"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[101],{8215:function(e,t,n){var o=n(7294);t.Z=function(e){var t=e.children,n=e.hidden,a=e.className;return o.createElement("div",{role:"tabpanel",hidden:n,className:a},t)}},6396:function(e,t,n){n.d(t,{Z:function(){return p}});var o=n(7462),a=n(7294),l=n(2389),s=n(9443);var i=function(){var e=(0,a.useContext)(s.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},r=n(9521),u=n(6010),d="tabItem_1uMI";function c(e){var t,n,o,l=e.lazy,s=e.block,c=e.defaultValue,p=e.values,m=e.groupId,k=e.className,h=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),g=null!=p?p:h.map((function(e){var t=e.props;return{value:t.value,label:t.label}})),T=(0,r.lx)(g,(function(e,t){return e.value===t.value}));if(T.length>0)throw new Error('Docusaurus error: Duplicate values "'+T.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var v=null===c?c:null!=(t=null!=c?c:null==(n=h.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(o=h[0])?void 0:o.props.value;if(null!==v&&!g.some((function(e){return e.value===v})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+v+'" but none of its children has the corresponding value. Available values are: '+g.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var x=i(),b=x.tabGroupChoices,f=x.setTabGroupChoices,y=(0,a.useState)(v),w=y[0],N=y[1],C=[],S=(0,r.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var I=b[m];null!=I&&I!==w&&g.some((function(e){return e.value===I}))&&N(I)}var V=function(e){var t=e.currentTarget,n=C.indexOf(t),o=g[n].value;o!==w&&(S(t),N(o),null!=m&&f(m,o))},j=function(e){var t,n=null;switch(e.key){case"ArrowRight":var o=C.indexOf(e.currentTarget)+1;n=C[o]||C[0];break;case"ArrowLeft":var a=C.indexOf(e.currentTarget)-1;n=C[a]||C[C.length-1]}null==(t=n)||t.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,u.Z)("tabs",{"tabs--block":s},k)},g.map((function(e){var t=e.value,n=e.label;return a.createElement("li",{role:"tab",tabIndex:w===t?0:-1,"aria-selected":w===t,className:(0,u.Z)("tabs__item",d,{"tabs__item--active":w===t}),key:t,ref:function(e){return C.push(e)},onKeyDown:j,onFocus:V,onClick:V},null!=n?n:t)}))),l?(0,a.cloneElement)(h.filter((function(e){return e.props.value===w}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},h.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==w})}))))}function p(e){var t=(0,l.Z)();return a.createElement(c,(0,o.Z)({key:String(t)},e))}},2845:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return u},contentTitle:function(){return d},metadata:function(){return c},toc:function(){return p},default:function(){return k}});var o=n(7462),a=n(3366),l=(n(7294),n(3905)),s=n(6396),i=n(8215),r=["components"],u={sidebar_position:4},d="Update state",c={unversionedId:"tutorial/update-state",id:"tutorial/update-state",isDocsHomePage:!1,title:"Update state",description:"In this part you'll learn how to properly update state stored in stock",source:"@site/docs/tutorial/update-state.mdx",sourceDirName:"tutorial",slug:"/tutorial/update-state",permalink:"/stocked/docs/tutorial/update-state",editUrl:"https://github.com/ArtiomTr/stocked/edit/main/docs/docs/tutorial/update-state.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Create state",permalink:"/stocked/docs/tutorial/create-state"},next:{title:"Filters",permalink:"/stocked/docs/tutorial/filters"}},p=[{value:"Checkboxes",id:"checkboxes",children:[],level:2},{value:"Optimization",id:"optimization",children:[],level:2},{value:"New todo",id:"new-todo",children:[],level:2},{value:"Intermediate result",id:"intermediate-result",children:[],level:2}],m={toc:p};function k(e){var t=e.components,u=(0,a.Z)(e,r);return(0,l.kt)("wrapper",(0,o.Z)({},m,u,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"update-state"},"Update state"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"In this part you'll learn how to properly update state stored in stock")),(0,l.kt)("h2",{id:"checkboxes"},"Checkboxes"),(0,l.kt)("p",null,"Let's add checkboxes to our todos."),(0,l.kt)(s.Z,{defaultValue:"js",groupId:"language",values:[{label:"JavaScript",value:"js"},{label:"TypeScript",value:"ts"}],mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"js",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"title=TodoList.jsx",title:"TodoList.jsx"},"import { useStockValue, useStockContext } from 'stocked';\n\nexport const TodoList = () => {\n    // highlight-start\n    const { setValue } = useStockContext();\n    // highlight-end\n    const todos = useStockValue('todos');\n\n    return (\n        <ul>\n            {todos.map(({ title }, key) => (\n                <li key={key}>\n                    {/* highlight-start */}\n                    <input\n                        id={`todo-${key}`}\n                        type=\"checkbox\"\n                        checked={completed}\n                        onChange={(e) =>\n                            setValue(`todos[${key}].completed`, e.target.checked)\n                        }\n                    />\n                    <label htmlFor={`todo-${key}`}>{title}</label>\n                    {/* highlight-end */}\n                </li>\n            ))}\n        </ul>\n    );\n};\n"))),(0,l.kt)(i.Z,{value:"ts",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"title=TodoList.tsx",title:"TodoList.tsx"},"import { useStockValue, useStockContext } from 'stocked';\nimport { TodoItemData } from './App';\n\nexport const TodoList = () => {\n    // highlight-start\n    const { setValue } = useStockContext();\n    // highlight-end\n    const todos = useStockValue<TodoItemData[]>('todos');\n\n    return (\n        <ul>\n            {todos.map(({ title }, key) => (\n                <li key={key}>\n                    {/* highlight-start */}\n                    <input\n                        id={`todo-${key}`}\n                        type=\"checkbox\"\n                        checked={completed}\n                        onChange={(e) =>\n                            setValue(`todos[${key}].completed`, e.target.checked)\n                        }\n                    />\n                    <label htmlFor={`todo-${key}`}>{title}</label>\n                    {/* highlight-end */}\n                </li>\n            ))}\n        </ul>\n    );\n};\n")))),(0,l.kt)("p",null,"As you can see, we're changing todo item's state via ",(0,l.kt)("inlineCode",{parentName:"p"},"setValue")," function. This function deeply sets value in object. "),(0,l.kt)("p",null,"This means, that when our value in stock is:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"{\n    todos: [\n        {\n            title: 'Some title'\n            completed: false,\n        }\n    ]\n}\n")),(0,l.kt)("p",null,"We can access ",(0,l.kt)("inlineCode",{parentName:"p"},"completed")," variable by path ",(0,l.kt)("inlineCode",{parentName:"p"},"todos[0].completed"),"."),(0,l.kt)("p",null,"But, now, when user clicks on checkbox whole app re-renders. We can view it thanks to React developer tools:"),(0,l.kt)("p",{align:"center"},(0,l.kt)("p",null,(0,l.kt)("img",{alt:"Performance",src:n(36).Z}))),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Cyan outline indicates which component re-renders"))),(0,l.kt)("p",null,"Let's fix this issue!"),(0,l.kt)("h2",{id:"optimization"},"Optimization"),(0,l.kt)("p",null,"Firstly, let's isolate todo item state. To do this, we'll create a new component ",(0,l.kt)("inlineCode",{parentName:"p"},"TodoItem"),"."),(0,l.kt)(s.Z,{defaultValue:"js",groupId:"language",values:[{label:"JavaScript",value:"js"},{label:"TypeScript",value:"ts"}],mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"js",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"title=TodoItem.jsx",title:"TodoItem.jsx"},"import { useCallback } from 'react';\nimport { useStockValue, useStockState } from 'stocked';\n\nexport const TodoItem = ({ index }) => {\n    const title = useStockValue(`todos[${index}].title`);\n    const [completed, setCompleted] = useStockState(`todos[${index}].completed`);\n\n    const onChange = useCallback((e) => {\n        setCompleted(e.target.checked);\n    }, [setCompleted]);\n\n    return (\n        <li>\n            <input\n                id={`todo-${index}`}\n                type=\"checkbox\"\n                checked={completed}\n                onChange={onChange}\n            />\n            <label htmlFor={`todo-${index}`}>{title}</label>\n        </li>\n    );\n}\n"))),(0,l.kt)(i.Z,{value:"ts",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"title=TodoItem.tsx",title:"TodoItem.tsx"},"import { ChangeEvent, useCallback } from 'react';\nimport { useStockValue, useStockState } from 'stocked';\n\ntype TodoItemProps = {\n    index: number;\n}\n\nexport const TodoItem = ({ index }: TodoItemProps) => {\n    const title = useStockValue<string>(`todos[${index}].title`);\n    const [completed, setCompleted] = useStockState<boolean>(`todos[${index}].completed`);\n\n    const onChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        setCompleted(e.target.checked);\n    }, [setCompleted]);\n\n    return (\n        <li>\n            <input\n                id={`todo-${index}`}\n                type=\"checkbox\"\n                checked={completed}\n                onChange={onChange}\n            />\n            <label htmlFor={`todo-${index}`}>{title}</label>\n        </li>\n    );\n}\n")))),(0,l.kt)("p",null,"Then, we need to change our ",(0,l.kt)("inlineCode",{parentName:"p"},"TodoList")," component:"),(0,l.kt)(s.Z,{defaultValue:"js",groupId:"language",values:[{label:"JavaScript",value:"js"},{label:"TypeScript",value:"ts"}],mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"js",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"title=TodoItem.jsx",title:"TodoItem.jsx"},'import { useStockValue } from "stocked";\nimport { TodoItem } from "./TodoItem";\n\nexport const TodoList = () => {\n    const todos = useStockValue("todos");\n\n    return (\n        <ul>\n            {todos.map((_, key) => (\n                {/* highlight-next-line */}\n                <TodoItem key={key} index={key} />\n            ))}\n        </ul>\n    );\n};\n'))),(0,l.kt)(i.Z,{value:"ts",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"title=TodoItem.tsx",title:"TodoItem.tsx"},'import { useStockValue } from "stocked";\nimport { TodoItemData } from "./App";\nimport { TodoItem } from "./TodoItem";\n\nexport const TodoList = () => {\n    const todos = useStockValue<TodoItemData[]>("todos");\n\n    return (\n        <ul>\n            {todos.map((_, key) => (\n                {/* highlight-next-line */}\n                <TodoItem key={key} index={key} />\n            ))}\n        </ul>\n    );\n};\n')))),(0,l.kt)("p",null,"As you can see, we don't need todos array to render them - we need only count. So, let's get only array length inside ",(0,l.kt)("inlineCode",{parentName:"p"},"TodoList")," component:"),(0,l.kt)(s.Z,{defaultValue:"js",groupId:"language",values:[{label:"JavaScript",value:"js"},{label:"TypeScript",value:"ts"}],mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"js",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"title=TodoList.jsx",title:"TodoList.jsx"},'import { useStockValue } from "stocked";\nimport { TodoItem } from "./TodoItem";\n\nexport const TodoList = () => {\n    const todoCount = useStockValue("todos.length");\n\n    return (\n        <ul>\n            {/* highlight-next-line */}\n            {new Array(todoCount).fill(0).map((_, key) => (\n                <TodoItem key={key} index={key} />\n            ))}\n        </ul>\n    );\n};\n'))),(0,l.kt)(i.Z,{value:"ts",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"title=TodoList.tsx",title:"TodoList.tsx"},'import { useStockValue } from "stocked";\nimport { TodoItem } from "./TodoItem";\n\nexport const TodoList = () => {\n    const todoCount = useStockValue<number>("todos.length");\n\n    return (\n        <ul>\n            {/* highlight-next-line */}\n            {new Array(todoCount).fill(0).map((_, key) => (\n                <TodoItem key={key} index={key} />\n            ))}\n        </ul>\n    );\n};\n')))),(0,l.kt)("p",null,"So, let's check our performance now:"),(0,l.kt)("p",{align:"center"},(0,l.kt)("p",null,(0,l.kt)("img",{alt:"Optimized list&#39;s performance",src:n(6806).Z}))),(0,l.kt)("p",null,"Perfect! Now, only one todo is highlighted!"),(0,l.kt)("h2",{id:"new-todo"},"New todo"),(0,l.kt)("p",null,"Finally, let's create possibility to add new todo. For this feature, we will create ",(0,l.kt)("inlineCode",{parentName:"p"},"NewTodo")," component:"),(0,l.kt)(s.Z,{defaultValue:"js",groupId:"language",values:[{label:"JavaScript",value:"js"},{label:"TypeScript",value:"ts"}],mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"js",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"title=NewTodo.jsx",title:"NewTodo.jsx"},"import { useCallback } from 'react';\nimport { useStockState, useStockContext } from 'stocked';\n\nexport const NewTodo = () => {\n    const { getValue, setValue } = useStockContext();\n    \n    const [title, setTitle] = useStockState('newTodo.title');\n\n    const onChange = useCallback((e) => {\n        setTitle(e.target.value);    \n    }, [setTitle]);\n\n    const createNewTodo = useCallback(() => {\n        const currentTitle = getValue('newTodo.title');\n        const currentTodos = getValue('todos');\n\n        setValue('todos', [...currentTodos, {\n            title: currentTitle,\n            completed: false,\n        }]);\n        \n        setValue('newTodo.title', '');\n    }, [getValue, setValue]);\n\n    return (\n        <div>\n            <div>\n                <label htmlFor=\"new-title\">New todo:</label>\n                <input id=\"new-title\" value={title} onChange={onChange} />\n            </div>\n            <button onClick={createNewTodo}>+ Add</button>\n        </div>\n    );\n};\n"))),(0,l.kt)(i.Z,{value:"ts",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"title=NewTodo.tsx",title:"NewTodo.tsx"},"import { ChangeEvent, useCallback } from 'react';\nimport { useStockState, useStockContext } from 'stocked';\nimport { TodoItemData } from './App'\n\nexport const NewTodo = () => {\n    const { getValue, setValue } = useStockContext();\n    \n    const [title, setTitle] = useStockState<string>('newTodo.title');\n\n    const onChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.target.value);    \n    }, [setTitle]);\n\n    const createNewTodo = useCallback(() => {\n        const currentTitle = getValue('newTodo.title');\n        const currentTodos = getValue<TodoItemData[]>('todos');\n\n        setValue('todos', [...currentTodos, {\n            title: currentTitle,\n            completed: false,\n        }]);\n\n        setValue('newTodo.title', '');\n    }, [getValue, setValue]);\n\n    return (\n        <div>\n            <div>\n                <label htmlFor=\"new-title\">New todo:</label>\n                <input id=\"new-title\" value={title} onChange={onChange} />\n            </div>\n            <button onClick={createNewTodo}>+ Add</button>\n        </div>\n    );\n};\n")))),(0,l.kt)("p",null,"And use this component in ",(0,l.kt)("inlineCode",{parentName:"p"},"App"),":"),(0,l.kt)(s.Z,{defaultValue:"js",groupId:"language",values:[{label:"JavaScript",value:"js"},{label:"TypeScript",value:"ts"}],mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"js",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"title=App.jsx",title:"App.jsx"},"// highlight-next-line\nimport { NewTodo } from \"./NewTodo\";\n\n// ...\n\nfunction App() {\n    return (\n        <StockRoot\n            initialValues={{\n                /** */\n                // highlight-start\n                newTodo: {\n                    title: ''\n                }\n                // highlight-end\n            }}\n        >\n            <h1>Todo list!</h1>\n            {/* highlight-next-line */}\n            <NewTodo />\n            <TodoList />\n        </StockRoot>\n    );\n}\n\nexport default App;\n"))),(0,l.kt)(i.Z,{value:"ts",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"title=App.tsx",title:"App.tsx"},"// highlight-next-line\nimport { NewTodo } from \"./NewTodo\";\n\n// ...\n\ntype AppState = {\n    todos: TodoItemData[];\n    // highlight-start\n    newTodo: {\n        title: string\n    }\n    // highlight-end\n};\n\nfunction App() {\n    return (\n        <StockRoot<AppState>\n            initialValues={{\n                /** ... */\n                // highlight-start\n                newTodo: {\n                    title: ''\n                }\n                // highlight-end\n            }}\n        >\n            <h1>Todo list!</h1>\n            {/* highlight-next-line */}\n            <NewTodo />\n            <TodoList />\n        </StockRoot>\n    );\n}\n\nexport default App;\n")))),(0,l.kt)("h2",{id:"intermediate-result"},"Intermediate result"),(0,l.kt)("p",null,"And this is what we have at the moment:"),(0,l.kt)("p",{align:"center"},(0,l.kt)("p",null,(0,l.kt)("img",{alt:"Result",src:n(1719).Z}))),(0,l.kt)("p",null,"Let's move on."))}k.isMDXComponent=!0},6806:function(e,t,n){t.Z=n.p+"assets/images/tutorial-optimized-list-5021c14b230690dff3b167422a0d9c98.jpg"},36:function(e,t,n){t.Z=n.p+"assets/images/tutorial-performance-751f00238a44ae6b1bc927d4c17f4cb2.jpg"},1719:function(e,t,n){t.Z=n.p+"assets/images/tutorial-update-state-result-46dab7a6b8c5fd6499492faaba8ede58.jpg"}}]);